def edicion_de_registros():
    df = st.session_state.df
    worksheet = st.session_state.worksheet

    if df.empty:
        st.warning("No hay registros disponibles para editar.")
        return


    df["ID"] = df["ID"].astype(int)
    min_id, max_id = df["ID"].min(), df["ID"].max()

    # âœ… INPUT MANUAL DE ID (con key distinto para evitar error de session_state)
    id_registro = st.number_input("Introduce el ID a editar:", min_value=min_id, max_value=max_id, step=1, key="id_manual")

    # ValidaciÃ³n del ID
    if id_registro < min_id or id_registro > max_id:
        st.error("El ID seleccionado no existe.")
        return

    st.write("NÃºmero total de registros en el DataFrame:", len(df))


    # Verifica si el ID existe en el DataFrame
    if id_registro not in df["ID"].values:
        st.error("El ID seleccionado no existe.")
        return

    # Obtener el registro a editar
    try:
        edit_index = df[df["ID"] == id_registro].index[0]
        registro_a_editar = df.loc[edit_index]
    except IndexError:
        st.error("No se encontrÃ³ el registro para editar.")
        return
    

    # âœ… Flag de limpieza de campos
    if st.session_state.get("reset_form", False):
        st.session_state["fecha_input"] = datetime.today()
        st.session_state["categoria_input"] = ""
        st.session_state["descripcion_input"] = ""
        st.session_state["monto_input"] = 0.0
        st.session_state["subcategoria_input"] = ""
        st.session_state["responsable_input"] = ""
        st.session_state["tipo_pago_input"] = "USD"
        st.session_state["tasa_cambio_input"] = 1.0
        st.session_state["reset_form"] = False

    # ðŸ“… Fecha
    fecha = st.date_input("Fecha de la transacciÃ³n", value=pd.to_datetime(registro_a_editar["FECHA"]).date(), key="fecha_input")

    # ðŸš« Bloquear cambio de categorÃ­a entre Ingreso/Gasto
    categoria_original = registro_a_editar["CATEGORIA"].strip().capitalize()
    st.session_state.edicion_activa = categoria_original
    categoria = st.selectbox("Selecciona la categorÃ­a", ["Ingreso", "Gasto"], index=["Ingreso", "Gasto"].index(categoria_original), key="categoria_input")

    if st.session_state.edicion_activa != categoria:
        st.warning("No puedes cambiar de Ingreso a Gasto o viceversa. Elimina este registro y crea uno nuevo.")
        st.stop()

    # SubcategorÃ­as y responsables
    subcategorias = {
        "Ingreso": ["", "Ventas Saha", "Ventas Netlink", "Alquiler", "Aporte de Capital", "Otros Ingresos"]
    }
    subcategorias_gasto_fijo = {
        "Gasto fijo": ["", "Alquiler", "NÃ³mina", "Servicios", "Gas", "Piscina", "Contadora", "Mantenimiento"]
    }
    subcategorias_gasto_variable = {
        "Gasto variable": ["", "Publicidad", "Comisiones", "Transporte", "Comida", "SEMAT", "IVA", "ISLR", "IVSS", "FAO", "Pensiones", "Patente", "Otros"]
    }

    if categoria == "Ingreso":
        monto = max(0.01, float(registro_a_editar["MONTO"]))
        subcategoria = st.selectbox("Selecciona la subcategorÃ­a de ingreso", subcategorias["Ingreso"], index=subcategorias["Ingreso"].index(registro_a_editar["SUB-CATEGORIA"]), key="subcategoria_input")
        responsable = st.selectbox("Â¿A quiÃ©n corresponde el ingreso?", ["SAHA", "AMINE", "Gabriel"], index=["SAHA", "AMINE", "Gabriel"].index(registro_a_editar["RESPONSABLE"]), key="responsable_input")
    else:
        subcategoria_tipo = st.selectbox("Selecciona el tipo de gasto", ["Gasto fijo", "Gasto variable"])
        if subcategoria_tipo == "Gasto fijo":
            subcategoria = st.selectbox("Selecciona la subcategorÃ­a", subcategorias_gasto_fijo["Gasto fijo"], index=subcategorias_gasto_fijo["Gasto fijo"].index(registro_a_editar["SUB-CATEGORIA"]), key="subcategoria_input")
        else:
            subcategoria = st.selectbox("Selecciona la subcategorÃ­a", subcategorias_gasto_variable["Gasto variable"], index=subcategorias_gasto_variable["Gasto variable"].index(registro_a_editar["SUB-CATEGORIA"]), key="subcategoria_input")
        responsable = st.selectbox("Â¿A quiÃ©n corresponde el gasto?", ["SAHA", "AMINE", "Gabriel", "NETLINK"], index=["SAHA", "AMINE", "Gabriel", "NETLINK"].index(registro_a_editar["RESPONSABLE"]), key="responsable_input")
        monto = min(-0.01, float(registro_a_editar["MONTO"]))

    # Resto del formulario
    descripcion = st.text_input("DescripciÃ³n de la transacciÃ³n", value=registro_a_editar["DESCRIPCION"], key="descripcion_input")
    monto = st.number_input("Monto", min_value=0.01, step=0.01, value=abs(monto), key="monto_input")
    tipo_pago = st.selectbox("Tipo de pago", ["DÃ³lares", "Zelle", "BSF", "BSF Transfer"], index=["DÃ³lares", "Zelle", "BSF", "BSF Transfer"].index(registro_a_editar["TIPO DE PAGO"]), key="tipo_pago_input")
    tasa_cambio = st.text_input("Tasa de cambio del dÃ­a (si aplica)", value=registro_a_editar["TASA DE CAMBIO"] if tipo_pago == "BSF" else "", key="tasa_cambio_input")

    # âœ… BOTÃ“N para actualizar
    if st.button("Actualizar registro"):
        df.at[edit_index, "FECHA"] = fecha
        df.at[edit_index, "CATEGORIA"] = categoria
        df.at[edit_index, "DESCRIPCION"] = descripcion
        df.at[edit_index, "MONTO"] = monto if categoria == "Ingreso" else -abs(monto)
        df.at[edit_index, "SUB-CATEGORIA"] = subcategoria
        df.at[edit_index, "RESPONSABLE"] = responsable
        df.at[edit_index, "TIPO DE PAGO"] = tipo_pago
        df.at[edit_index, "TASA DE CAMBIO"] = tasa_cambio if tipo_pago == "BSF" else ""

        # Actualiza en Google Sheets
        actualizar_datos_modificado(worksheet, df, id_registro)

        # Recarga los datos desde la hoja
        data_actual = worksheet.get_all_values()
        df_actualizado = pd.DataFrame(data_actual[1:], columns=data_actual[0])
        st.session_state.df = df_actualizado

        st.success("Registro actualizado correctamente.")
        st.session_state["reset_form"] = True
        st.rerun()